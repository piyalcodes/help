    // popup message Class
    $self = this;
    Messages = {};
    Messages.Base = new Class({
        Implements: Options,
        options: {
            id: 'message'
        },
        initialize(options){

            this.setOptions(options);
        },
        show(){

            var $Popup = this._getPopup();
        },
        hide2(){

            var $Popup = this._getPopup();
            $Popup.remove();
        },
        _getPopup(){

            var $Popup = document.getElement(`#${this.options.id}`);
            if(!$Popup){

                $Popup = new Element(`div#${this.options.id}`);
                //this._getWrapper();
                $Popup.inject(this._getWrapper());
                var $self = this;
                $Popup = document.getElement(`#${this.options.id}`);
                $Popup.getElement('i.icon-endor-close').addEventListener("click", () => {
                    $self.hide2();
                    $self.onOk();
                });

                $Popup.getElement('a.Button').addEventListener("click", () => {
                    $self.hide2();
                    $self.onRevert();
                });

            }
            return $Popup;
        },
        onOk: function(){},
        onRevert: function(){},
        _getWrapper(){
            var content = document.getElementById(this.options.id);
            if(!content){

                content = new Element(`div#${this.options.id}`);
                //content.inject(document.body);
                document.body.insertBefore(content, document.getElement(".Main"));
            }
            content.addClass("HeaderPresenceStatus Success");
            var contentContainer = content.getElement('span.Action');
            if(!contentContainer){
                contentContainer = new Element('span.Action');
                contentContainer.inject(content);
            }
            var contentContainer = content.getElement('a.Organisation');
            if(!contentContainer){
                contentContainer = new Element('a.Organisation');
                contentContainer.setAttribute("href", "javascript:void(0)");
                contentContainer.inject(content);

            }
            var contentContainer = content.getElement('a.Button');
            if(!contentContainer){
                contentContainer = new Element('a.Button');
                contentContainer.addClass("Link").setAttribute("href", "javascript:void(0)");
                contentContainer.inject(content);
            }
            var contentContainer = content.getElement('i.icon-endor-close');
            if(!contentContainer){
                contentContainer = new Element('i.icon-endor-close');
                contentContainer.inject(content);
            }
            return content;
        },
    });
    Messages.Success = new Class({
        Extends: Messages.Base,
        initialize(options){
            options = options || {};
            options.id = 'message';
            this.parent(options);
        },
        setAction(action){
            this._getPopup().getElement('.Action');
            this._getPopup().getElement('.Action').set('html', action);
        },
        setOrganisation(Organisation){
            this._getPopup().getElement('.Organisation').set('html', Organisation);
        },
        setOrganisationUrl(Url){
            this._getPopup().getElement('.Organisation').setAttribute('href', Url);
        },
        setOption(Option){
            this._getPopup().getElement('.Button').set('html', Option);
        },
        setOnRevert(callback){
            this.onRevert = callback;
        },

    });
    Messages.fadeOut = new Class({
        Extends: Messages.Base,
        initialize(options){
            options = options || {};
            options.id = 'message';
            this.parent(options);
        },
        setAction(action){
            this._getPopup().getElement('.Action');
            this._getPopup().getElement('.Action').set('html', action);
        },
        setFadeOut(time){
            var $self = this;
            setTimeout(function() {
                $self.hide2();
            }, time)
        },
        setOnOk(callback){
            this.onOk = callback;
        },
    });

    // Tooltip Class
    Tooltips = {};
    Tooltips.Base = new Class({
        Implements: Options,
        options: {
            class: 'ToolTip'
        },
        initialize(options){
            this.setOptions(options);
        },
        show(){
            var $Tooltip = this._getTooltip();
        },
        hide(){
            var $Tooltip = this._getTooltip();
            $Tooltip.remove();
        },
        setIcon: function(){},
        setTitle: function(){},
        setContent: function(){},
        _getTooltip(){
            var $Tooltip = document.getElement(`.${this.options.class}`);
            if(!$Tooltip){
                $Tooltip = new Element(`div.${this.options.class}`);
                //this._getWrapper();
                this._getWrapper();
                var $self = this;
                $Tooltip = document.getElement(`.${this.options.class}`);
            }
            return $Tooltip;
        },
        _getWrapper(){
            var content = document.getElementById(this.options.class);
            if(!content){

                content = new Element('div.' + this.options.class);
                document.body.insertBefore(content, document.getElement(".Main"));
            }

            var contentContainer = content.getElement('i');
            if(!contentContainer) {

                contentContainer = new Element('i');
                contentContainer.inject(content);
            }

            contentContainer = new Element('span');
            contentContainer.addClass('TooltipTitle');
            contentContainer.inject(content);

            contentContainer = new Element('span');
            contentContainer.addClass('TooltipContent');
            contentContainer.inject(content);

            return content;
        },
    });
    Tooltips.IconToolTip = new Class({
        Extends: Tooltips.Base,
        initialize(options){

            options = options || {};
            options.class = 'ToolTip';
            this.parent(options);
        },
        setIcon(icon) {

            this._getTooltip().getElement('i');
            this._getTooltip().getElement('i').addClass(icon);
        },
        setTitle(title) {

            this._getTooltip().getElement('.TooltipTitle');
            this._getTooltip().getElement('.TooltipTitle').set('html', title);
        },
        setContent(content){

            this._getTooltip().getElement('.TooltipContent');
            this._getTooltip().getElement('.TooltipContent').set('html', content);
        },
        setPosition(left, top, width, pos){

            this._getTooltip().style.left       = left;
            this._getTooltip().style.top        = top;
            this._getTooltip().style.width      = width;
            this._getTooltip().style.position   = pos;
        }
    });
    Tooltips.ToolTip = new Class({
        Extends: Tooltips.Base,
        initialize(options){

            options = options || {};
            options.class = 'ToolTip';
            this.parent(options);
        },
        setContent(content){

            this._getTooltip().getElement('.TooltipContent');
            this._getTooltip().getElement('.TooltipContent').set('html', content);
        },
        setPosition(left, top, width, pos){

            this._getTooltip().style.left       = left;
            this._getTooltip().style.top        = top;
            this._getTooltip().style.width      = width;
            this._getTooltip().style.position   = pos;
        }
    });
/*
    const TooltipsData = new Tooltips.IconToolTip();
    TooltipsData.setPosition('500px','200px', '500px');
    TooltipsData.setIcon('icon-class');
    TooltipsData.setTitle('title data title data title data title data ');
    TooltipsData.setContent(' Contenetsssss Contenetsssssv Contenets ssssContenetsssssCo ntenetsssss ContenetsssssContenets sssContenetsssss Contenetsssssvv v');
    TooltipsData.show();

    setTimeout(function() {const TooltipsData = new Tooltips.IconToolTip(); TooltipsData.hide();  }, 2500)
*/

//===========================================================
//===========================================================
//===========================================================


const MessagesPopup = new Messages.Success();
                    MessagesPopup.setAction('Your action has been completed');
                    MessagesPopup.setOrganisation(org);
                    MessagesPopup.setOrganisationUrl('http://www.google.com');
                    MessagesPopup.setOption('Undo moving');
                    MessagesPopup.setOnRevert(function(){ // callback for close event and show the massedit again

                        this.hide2();
                        const MessagesPopupSub = new Messages.fadeOut();
                        MessagesPopupSub.setAction('The action has been reverted.');
                        MessagesPopupSub.setFadeOut(3000);
                        MessagesPopupSub.setOnOk(function(){ // callback for close event and show the massedit again
                            this.hide2();
                        });
                        MessagesPopupSub.show();
                    });
                    MessagesPopup.setOnOk(function(){ // callback for close event and show the massedit again
                        this.hide2();
                        $self.selected_studies = [];
                    });
                    MessagesPopup.show();



//===========================================================
//===========================================================
//===========================================================


if(display == true) {
                        let leftPos = paramValues.event.pageX - parseInt(paramValues.left) + 'px';
                        let topPos = paramValues.event.clientY - parseInt(paramValues.top) + 'px';

                        const TooltipsData = new Tooltips.ToolTip();
                        TooltipsData.setPosition(leftPos ,topPos , paramValues.width, paramValues.pos);
                        TooltipsData.setContent(paramValues.content);
                        TooltipsData.show();
                    } else {
                        const TooltipsData = new Tooltips.ToolTip();
                        TooltipsData.hide();
                    }
